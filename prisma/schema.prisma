// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Next Auth

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App 

model User {
  id            String    @id @default(cuid())
  name          String?
  lastname      String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  cover         String?
  bio           String?
  link          String?
  location      String?
  createdAt     DateTime  @default(now())
  
  accounts      Account[]
  sessions      Session[]
  followers     Follow[]  @relation("follower")
  followeds     Follow[]  @relation("followed")
  posts         Post[]
  likes         Like[]
  reposts       Repost[]
}

model Follow {
  id            String    @id @default(cuid())
  followerId    String
  followingId   String
  createdAt     DateTime  @default(now())
  follower      User      @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followed      User      @relation("followed", fields: [followingId], references: [id], onDelete: Cascade)
}

model Post {
  id            String    @id @default(cuid())
  content       String
  image         String?
  link          String?
  parentId      String?
  userId        String
  createdAt     DateTime  @default(now())

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes         Like[]
  reposts       Repost[]
  replies       Post[]    @relation("comments")
  parent        Post?     @relation("comments", fields: [parentId], references: [id], onDelete: Cascade)
}

model Like {
  id			      String		@id @default(cuid())
  userId        String
  postId        String
  createdAt     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Repost {
  id			      String		@id @default(cuid())
  userId        String
  postId        String
  createdAt     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
}
